I"g<h2 id="클라이언트-pc에서-ap서버와-db서버를-거쳐-다시-클라이언트-웹브라우저까지의-데이터-흐름을">클라이언트 PC에서 AP서버와 DB서버를 거쳐 다시 클라이언트 웹브라우저까지의 데이터 흐름을</h2>

<h2 id="총-여섯-단계로-나누어서-정리">총 여섯 단계로 나누어서 정리</h2>

<ul>
  <li>
    <h2 id="클라이언트-pc부터-웹-서버까지">클라이언트 PC부터 웹 서버까지</h2>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 웹 브라우저가 요청을 발행
2. 이름 해석을 한다
3. 웹 서버가 요청을 접수
4. 웹 서버가 정적 콘텐츠인지 동적 콘텐츠인지 판단
5. 필요한 경로로 데이터에 엑세스
</code></pre></div>    </div>
  </li>
</ul>

<p><br />
<em>용어정리</em></p>

<blockquote>
  <p><strong>정적 콘텐츠</strong> : 실시간으로 변경할 필요가 없는 데이터. 가령 회사 로고 이미지. 웹 서버에서는 데이터 갱신 빈도가 낮은 것은 디스크에 저장해서 요청이 있으면 저장해둔 내용을 HTTP를 통해 사용자 웹 브라우저로 반환
<br /></p>
</blockquote>

<blockquote>
  <p><strong>동적 콘텐츠</strong> : 높은 빈도로 변경되는 데이터. 예를 들어 사용자의 은행 잔고 정보, 최신 날씨 정보 데이터, 쇼핑 사이트의 장바구니. 입금을 했는데 잔고가 바뀌지 않는다면 곤란하다. 이런 데이터를 서버 내부의 디스크에 저장하면 갱신 빈도가 높기 때문에 디스크 성능이 병목 현상의 원인이 될 수 있다. 일반적으로 동적 콘텐츠는 ‘AP 서버’가 HTML 파일을 동적으로 생성하고 웹 서버는 동적 콘텐츠에 대한 요청을 AP 서버에게 던지고 결과를 기다림</p>
</blockquote>

<p><br />
주소창에 ‘https://aleatorik.github.io/’를 입력하고 엔터 키를 누른다. 이때 이름해석(name resolution)이 이루어진 후에 웹 브라우저로 접속하게 된다.
이는 ‘HTTP’를 이용해서 aleatorik.github.io 서버에 접속한다는 의미다. 하지만 웹 브라우저가 상기 서버의 IP주소를 모른다면, 외부의 DNS서버에 요청을 던지고
해당 서버의 IP주소 검색 결과를 반환 받는다.</p>

<p><strong><em>인터넷 상의 주소는 ‘IP’라는 숫자로 표현돼 있어서 문자열인 URL과 IP를 연결시키지 않으면 통신이 되지 않는다.</em></strong>
<br />
<br /></p>

<ul>
  <li>
    <h2 id="웹-서버부터-ap-서버까지">웹 서버부터 AP 서버까지</h2>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 웹 서버로부터 요청이 도착
2. 스레드가 요청을 받으면 자신이 계산할 수 있는지, 아니면 DB 접속이 필요한지를 판단
3. DB 접속이 필요하면 연결 풀에 액세스
4. DB 서버에 요청을 던짐
</code></pre></div>    </div>
  </li>
</ul>

<p><br />
동적 콘텐츠 요청에 대해서 아직 존재하지 않는 콘텐츠를 가능한 빨리 만들어 내는 것이 AP 서버의 역할이다.
하지만 이런 물음이 생길 수 있다. 데이터가 필요하면 바로 DB 서버에 접속하면 되지, 굳이 AP서버를 거치는 이유는 무엇인가?
그것은 바로 DB 서버에 접속하는 것이 항상 효율적이라고 할 수 없기 때문이다. 예를 들어, ‘대한민국 행정 경계 정보’는 자주 바뀌는 것이 아니기 때문에
이것을 매번 데이터베이스에 질의할 필요는 없다. <strong>이렇게 규모가 작고 갱신 빈도가 낮은 정보는 서버 내부에 캐시로 저장해두었다가 반환하는 것이 좋다.</strong></p>

<ul>
  <li>
    <h2 id="ap-서버부터-db-서버까지">AP 서버부터 DB 서버까지</h2>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. AP 서버로부터 요청이 도착
2. 프로세스가 요청을 접수하고 캐시가 존재하는지 확인
3. 캐시에 없으면 디스크에 엑세스
4. 디스크가 데이터를 반환
5. 데이터를 캐시 형태로 저장
6. 결과를 AP 서버에 반환
</code></pre></div>    </div>

    <p><br />
 <em>참고자료: <a href="https://opentutorials.org/module/4636">클릭이동</a></em>
 <br />
 <em>참고도서: Hello Coding 그림으로 개념을 이해하는 알고리즘</em></p>
  </li>
</ul>
:ET